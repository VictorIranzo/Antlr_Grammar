//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\GitHub\Antlr_Grammar\Grammars\UserGrammar\UserGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class UserGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, INT=9;
	public const int
		RULE_rul = 0, RULE_condicion = 1, RULE_booleanAttribute = 2, RULE_numericAttribute = 3, 
		RULE_comparisionNumeric = 4, RULE_connector = 5;
	public static readonly string[] ruleNames = {
		"rul", "condicion", "booleanAttribute", "numericAttribute", "comparisionNumeric", 
		"connector"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Si'", "'no'", "'es vegetariano'", "'est\u00E1 ingresado'", "'la edad del usuario'", 
		"'es mayor que'", "' y '", "' o '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UserGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UserGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UserGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UserGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RulContext : ParserRuleContext {
		public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		public RulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterRul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitRul(this);
		}
	}

	[RuleVersion(0)]
	public RulContext rul() {
		RulContext _localctx = new RulContext(Context, State);
		EnterRule(_localctx, 0, RULE_rul);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; Match(T__0);
			State = 13; condicion(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionContext : ParserRuleContext {
		public NumericAttributeContext numericAttribute() {
			return GetRuleContext<NumericAttributeContext>(0);
		}
		public ComparisionNumericContext comparisionNumeric() {
			return GetRuleContext<ComparisionNumericContext>(0);
		}
		public ITerminalNode INT() { return GetToken(UserGrammarParser.INT, 0); }
		public BooleanAttributeContext booleanAttribute() {
			return GetRuleContext<BooleanAttributeContext>(0);
		}
		public CondicionContext[] condicion() {
			return GetRuleContexts<CondicionContext>();
		}
		public CondicionContext condicion(int i) {
			return GetRuleContext<CondicionContext>(i);
		}
		public ConnectorContext connector() {
			return GetRuleContext<ConnectorContext>(0);
		}
		public CondicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterCondicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitCondicion(this);
		}
	}

	[RuleVersion(0)]
	public CondicionContext condicion() {
		return condicion(0);
	}

	private CondicionContext condicion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondicionContext _localctx = new CondicionContext(Context, _parentState);
		CondicionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_condicion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 16; numericAttribute();
				State = 17; comparisionNumeric();
				State = 18; Match(INT);
				}
				break;
			case T__2:
			case T__3:
				{
				State = 20; booleanAttribute();
				}
				break;
			case T__1:
				{
				State = 21; Match(T__1);
				State = 22; booleanAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 31;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CondicionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_condicion);
					State = 25;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 26; connector();
					State = 27; condicion(5);
					}
					} 
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanAttributeContext : ParserRuleContext {
		public BooleanAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterBooleanAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitBooleanAttribute(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAttributeContext booleanAttribute() {
		BooleanAttributeContext _localctx = new BooleanAttributeContext(Context, State);
		EnterRule(_localctx, 4, RULE_booleanAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAttributeContext : ParserRuleContext {
		public NumericAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterNumericAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitNumericAttribute(this);
		}
	}

	[RuleVersion(0)]
	public NumericAttributeContext numericAttribute() {
		NumericAttributeContext _localctx = new NumericAttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_numericAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionNumericContext : ParserRuleContext {
		public ComparisionNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisionNumeric; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterComparisionNumeric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitComparisionNumeric(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionNumericContext comparisionNumeric() {
		ComparisionNumericContext _localctx = new ComparisionNumericContext(Context, State);
		EnterRule(_localctx, 8, RULE_comparisionNumeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectorContext : ParserRuleContext {
		public ConnectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.EnterConnector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserGrammarListener typedListener = listener as IUserGrammarListener;
			if (typedListener != null) typedListener.ExitConnector(this);
		}
	}

	[RuleVersion(0)]
	public ConnectorContext connector() {
		ConnectorContext _localctx = new ConnectorContext(Context, State);
		EnterRule(_localctx, 10, RULE_connector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return condicion_sempred((CondicionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condicion_sempred(CondicionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '-', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1A', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', ' ', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '#', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x3', '\x4', 
		'\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x4', '\x3', '\x2', 
		'\x5', '\x6', '\x3', '\x2', '\t', '\n', '\x2', ')', '\x2', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'$', '\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', 
		'\n', '(', '\x3', '\x2', '\x2', '\x2', '\f', '*', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\xF', '\a', '\x3', '\x2', '\x2', '\xF', '\x10', '\x5', 
		'\x4', '\x3', '\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x12', '\b', '\x3', '\x1', '\x2', '\x12', '\x13', '\x5', '\b', '\x5', 
		'\x2', '\x13', '\x14', '\x5', '\n', '\x6', '\x2', '\x14', '\x15', '\a', 
		'\v', '\x2', '\x2', '\x15', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x1A', '\x5', '\x6', '\x4', '\x2', '\x17', '\x18', '\a', '\x4', '\x2', 
		'\x2', '\x18', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x19', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x16', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\f', '\x6', '\x2', '\x2', '\x1C', '\x1D', '\x5', 
		'\f', '\a', '\x2', '\x1D', '\x1E', '\x5', '\x4', '\x3', '\a', '\x1E', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', '%', '\t', 
		'\x2', '\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\a', '\a', '\x2', '\x2', '\'', '\t', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\a', '\b', '\x2', '\x2', ')', '\v', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\t', '\x3', '\x2', '\x2', '+', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x19', '!',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
