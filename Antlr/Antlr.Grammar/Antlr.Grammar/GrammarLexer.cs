//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\RulesDesigner\Antlr\Antlr.Grammar\Antlr.Grammar\Grammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ATTRIBUTENUMERIC=2, ATTRIBUTESTRING=3, UNION=4, GREATERTHAN=5, 
		CONTAINS=6, INT=7, SEARCH=8, WS=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "ATTRIBUTENUMERIC", "ATTRIBUTESTRING", "UNION", "GREATERTHAN", 
		"CONTAINS", "INT", "DIGIT", "SEARCH", "STRING", "WS"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Si'", "'la presi\u00F3n arterial del usuario'", "'el nombre del usuario'", 
		"' y '", "'es mayor que'", "'contiene'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ATTRIBUTENUMERIC", "ATTRIBUTESTRING", "UNION", "GREATERTHAN", 
		"CONTAINS", "INT", "SEARCH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', '\x83', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x6', '\b', 'n', '\n', '\b', '\r', '\b', '\xE', '\b', 'o', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x6', '\v', 'y', '\n', '\v', '\r', '\v', '\xE', '\v', 'z', 
		'\x3', '\f', '\x6', '\f', '~', '\n', '\f', '\r', '\f', '\xE', '\f', '\x7F', 
		'\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\x2', '\x13', '\n', '\x15', '\x2', '\x17', '\v', '\x3', '\x2', '\x5', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\x83', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x19', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\a', '<', '\x3', '\x2', '\x2', '\x2', '\t', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\v', 'V', '\x3', '\x2', '\x2', '\x2', '\r', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\xF', 'm', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x13', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x15', 'x', '\x3', '\x2', '\x2', '\x2', '\x17', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\a', 'U', '\x2', '\x2', '\x1A', '\x1B', '\a', 
		'k', '\x2', '\x2', '\x1B', '\x4', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\a', 'n', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x63', '\x2', 
		'\x2', '\x1E', '\x1F', '\a', '\"', '\x2', '\x2', '\x1F', ' ', '\a', 'r', 
		'\x2', '\x2', ' ', '!', '\a', 't', '\x2', '\x2', '!', '\"', '\a', 'g', 
		'\x2', '\x2', '\"', '#', '\a', 'u', '\x2', '\x2', '#', '$', '\a', 'k', 
		'\x2', '\x2', '$', '%', '\a', '\xF5', '\x2', '\x2', '%', '&', '\a', 'p', 
		'\x2', '\x2', '&', '\'', '\a', '\"', '\x2', '\x2', '\'', '(', '\a', '\x63', 
		'\x2', '\x2', '(', ')', '\a', 't', '\x2', '\x2', ')', '*', '\a', 'v', 
		'\x2', '\x2', '*', '+', '\a', 'g', '\x2', '\x2', '+', ',', '\a', 't', 
		'\x2', '\x2', ',', '-', '\a', 'k', '\x2', '\x2', '-', '.', '\a', '\x63', 
		'\x2', '\x2', '.', '/', '\a', 'n', '\x2', '\x2', '/', '\x30', '\a', '\"', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\x66', '\x2', '\x2', '\x31', '\x32', 
		'\a', 'g', '\x2', '\x2', '\x32', '\x33', '\a', 'n', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\"', '\x2', '\x2', '\x34', '\x35', '\a', 'w', '\x2', '\x2', 
		'\x35', '\x36', '\a', 'u', '\x2', '\x2', '\x36', '\x37', '\a', 'w', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\x63', '\x2', '\x2', '\x38', '\x39', '\a', 
		't', '\x2', '\x2', '\x39', ':', '\a', 'k', '\x2', '\x2', ':', ';', '\a', 
		'q', '\x2', '\x2', ';', '\x6', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'g', '\x2', '\x2', '=', '>', '\a', 'n', '\x2', '\x2', '>', '?', '\a', 
		'\"', '\x2', '\x2', '?', '@', '\a', 'p', '\x2', '\x2', '@', '\x41', '\a', 
		'q', '\x2', '\x2', '\x41', '\x42', '\a', 'o', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x64', '\x2', '\x2', '\x43', '\x44', '\a', 't', '\x2', '\x2', '\x44', 
		'\x45', '\a', 'g', '\x2', '\x2', '\x45', '\x46', '\a', '\"', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x66', '\x2', '\x2', 'G', 'H', '\a', 'g', '\x2', '\x2', 
		'H', 'I', '\a', 'n', '\x2', '\x2', 'I', 'J', '\a', '\"', '\x2', '\x2', 
		'J', 'K', '\a', 'w', '\x2', '\x2', 'K', 'L', '\a', 'u', '\x2', '\x2', 
		'L', 'M', '\a', 'w', '\x2', '\x2', 'M', 'N', '\a', '\x63', '\x2', '\x2', 
		'N', 'O', '\a', 't', '\x2', '\x2', 'O', 'P', '\a', 'k', '\x2', '\x2', 
		'P', 'Q', '\a', 'q', '\x2', '\x2', 'Q', '\b', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\"', '\x2', '\x2', 'S', 'T', '\a', '{', '\x2', '\x2', 
		'T', 'U', '\a', '\"', '\x2', '\x2', 'U', '\n', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\a', 'g', '\x2', '\x2', 'W', 'X', '\a', 'u', '\x2', '\x2', 
		'X', 'Y', '\a', '\"', '\x2', '\x2', 'Y', 'Z', '\a', 'o', '\x2', '\x2', 
		'Z', '[', '\a', '\x63', '\x2', '\x2', '[', '\\', '\a', '{', '\x2', '\x2', 
		'\\', ']', '\a', 'q', '\x2', '\x2', ']', '^', '\a', 't', '\x2', '\x2', 
		'^', '_', '\a', '\"', '\x2', '\x2', '_', '`', '\a', 's', '\x2', '\x2', 
		'`', '\x61', '\a', 'w', '\x2', '\x2', '\x61', '\x62', '\a', 'g', '\x2', 
		'\x2', '\x62', '\f', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\x65', '\x2', '\x2', '\x64', '\x65', '\a', 'q', '\x2', '\x2', '\x65', 
		'\x66', '\a', 'p', '\x2', '\x2', '\x66', 'g', '\a', 'v', '\x2', '\x2', 
		'g', 'h', '\a', 'k', '\x2', '\x2', 'h', 'i', '\a', 'g', '\x2', '\x2', 
		'i', 'j', '\a', 'p', '\x2', '\x2', 'j', 'k', '\a', 'g', '\x2', '\x2', 
		'k', '\xE', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\x11', '\t', 
		'\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\x10', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\t', '\x2', 
		'\x2', '\x2', 'r', '\x12', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', 
		'$', '\x2', '\x2', 't', 'u', '\x5', '\x15', '\v', '\x2', 'u', 'v', '\a', 
		'$', '\x2', '\x2', 'v', '\x14', '\x3', '\x2', '\x2', '\x2', 'w', 'y', 
		'\t', '\x3', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 
		'z', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '|', '~', '\t', '\x4', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\b', '\f', '\x2', '\x2', 
		'\x82', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', '\x2', 'o', 'z', '\x7F', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr.Grammar
