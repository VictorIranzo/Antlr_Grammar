//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\RulesDesigner\Antlr\Antlr.Grammar\Antlr.Grammar\Grammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ATTRIBUTENUMERIC=2, ATTRIBUTESTRING=3, UNION=4, GREATERTHAN=5, 
		CONTAINS=6, INT=7, SEARCH=8, WS=9;
	public const int
		RULE_regla = 0, RULE_condicion = 1;
	public static readonly string[] ruleNames = {
		"regla", "condicion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Si'", "'la presi\u00F3n arterial del usuario'", "'el nombre del usuario'", 
		"' y '", "'es mayor que'", "'contiene'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ATTRIBUTENUMERIC", "ATTRIBUTESTRING", "UNION", "GREATERTHAN", 
		"CONTAINS", "INT", "SEARCH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ReglaContext : ParserRuleContext {
		public CondicionContext condicion() {
			return GetRuleContext<CondicionContext>(0);
		}
		public ReglaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regla; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterRegla(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitRegla(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegla(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReglaContext regla() {
		ReglaContext _localctx = new ReglaContext(Context, State);
		EnterRule(_localctx, 0, RULE_regla);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; Match(T__0);
			State = 5; condicion(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTESTRING() { return GetToken(GrammarParser.ATTRIBUTESTRING, 0); }
		public ITerminalNode CONTAINS() { return GetToken(GrammarParser.CONTAINS, 0); }
		public ITerminalNode SEARCH() { return GetToken(GrammarParser.SEARCH, 0); }
		public ITerminalNode ATTRIBUTENUMERIC() { return GetToken(GrammarParser.ATTRIBUTENUMERIC, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(GrammarParser.GREATERTHAN, 0); }
		public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		public CondicionContext[] condicion() {
			return GetRuleContexts<CondicionContext>();
		}
		public CondicionContext condicion(int i) {
			return GetRuleContext<CondicionContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(GrammarParser.UNION, 0); }
		public CondicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCondicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCondicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondicionContext condicion() {
		return condicion(0);
	}

	private CondicionContext condicion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondicionContext _localctx = new CondicionContext(Context, _parentState);
		CondicionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_condicion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTESTRING:
				{
				State = 8; Match(ATTRIBUTESTRING);
				State = 9; Match(CONTAINS);
				State = 10; Match(SEARCH);
				}
				break;
			case ATTRIBUTENUMERIC:
				{
				State = 11; Match(ATTRIBUTENUMERIC);
				State = 12; Match(GREATERTHAN);
				State = 13; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 21;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CondicionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_condicion);
					State = 16;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 17; Match(UNION);
					State = 18; condicion(4);
					}
					} 
				}
				State = 23;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return condicion_sempred((CondicionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condicion_sempred(CondicionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x1B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x11', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x19', '\v', '\x3', '\x3', '\x3', '\x2', '\x3', '\x4', '\x4', '\x2', 
		'\x4', '\x2', '\x2', '\x2', '\x1A', '\x2', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x10', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\a', '\x3', 
		'\x2', '\x2', '\a', '\b', '\x5', '\x4', '\x3', '\x2', '\b', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\n', '\b', '\x3', '\x1', '\x2', '\n', '\v', 
		'\a', '\x5', '\x2', '\x2', '\v', '\f', '\a', '\b', '\x2', '\x2', '\f', 
		'\x11', '\a', '\n', '\x2', '\x2', '\r', '\xE', '\a', '\x4', '\x2', '\x2', 
		'\xE', '\xF', '\a', '\a', '\x2', '\x2', '\xF', '\x11', '\a', '\t', '\x2', 
		'\x2', '\x10', '\t', '\x3', '\x2', '\x2', '\x2', '\x10', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x17', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\f', '\x5', '\x2', '\x2', '\x13', '\x14', '\a', '\x6', '\x2', 
		'\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x6', '\x15', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x5', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x10', '\x17',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr.Grammar
